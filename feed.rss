<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Swift Vietnam Community</title><description>A community for Vietnamese Swift enthusiasts.</description><link>https://swiftvietnam.com</link><language>en</language><lastBuildDate>Wed, 27 May 2020 00:03:23 +0200</lastBuildDate><pubDate>Wed, 27 May 2020 00:03:23 +0200</pubDate><ttl>250</ttl><atom:link href="https://swiftvietnam.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://swiftvietnam.com/posts/2020-05-27_ban_tin_swift_vietnam_so_2</guid><title>Bản tin Swift Việt Nam #2</title><description>Bản tin Swift Việt Nam #2</description><link>https://swiftvietnam.com/posts/2020-05-27_ban_tin_swift_vietnam_so_2</link><pubDate>Wed, 27 May 2020 01:28:00 +0200</pubDate><content:encoded><![CDATA[<h1>Bản tin Swift Việt Nam #2</h1><p>Mở đầu xin cảm ơn sự khích lệ của các bạn cho "Bản tin Swift #1". Mình rất vui vì bài viết đưa lại một số thông tin bổ ích cho các bạn. Mình muốn nhấn mạnh 1 lần nữa là mình muốn xây dựng SwiftVietnam thành một cộng đồng mạnh để lập trình viện Swift Việt Nam có thể khẳng định mình với bạn bè thế giới. "Bản tin Swift" là một trong những project để tiến tới mục tiêu đó. Mình rất mong muốn có thêm sự đóng góp của những ai tâm huyết với dự án này. Toàn bộ mã nguồn trang web <a href="https://swiftvietnam.com">https://swiftvietnam.com</a> được hosted tại <a href="https://github.com/SwiftVietnam/SwiftVietnam">Github</a>. Mình sử dụng Github Issues để tổng hợp <a href="https://github.com/SwiftVietnam/SwiftVietnam/issues/1">thông tin cho bài viết này</a>.</p><h1>Tin Tức</h1><h2>Swift 5.2.4</h2><p>Swift 5.2.4 đã được phát hành vào ngày 20.5. Ngoài việc hỗ trợ Xcode 11.5 cho MacOS, phiên bản này hỗ trợ thêm các Linux distro mới như CentOS 8, Amazon Linux 2.</p><p>Các bạn xem thêm chi tiết <a href="https://swift.org/download/#releases">tại đây</a></p><h2>Tiến tới Swift 5.3</h2><p>Trong <a href="https://swiftvietnam.com/posts/2020-05-20_ban_tin_swift_vietnam_so_1/">bản tin #1</a>, mình đã giới thiệu các tính năng mới sẽ có mặt trong phiên bản Swift tiếp theo. Trên trang blog Swift.org, chúng ta có thể xem chi tiết <a href="https://swift.org/blog/5-3-release-process/">quy trình phát hành của Swift 5.3</a>. Nếu không có gì bất ngờ, mình dự đoán phiên bản Swift 5.3 sẽ được phát hành cùng với Xcode 12 và iOS 14 sau WWDC20.</p><h2>[SE-0283] Tuples Conform to <code>Equatable</code>, <code>Comparable</code>, and <code>Hashable</code> được chấp nhận.</h2><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0283-tuples-are-equatable-comparable-hashable.md"><code>SE-0283</code></a> đã được chấp nhận và sẽ được tích hợp vào phiên bản Swift tiếp theo trong tương lại. Cái SE này sẽ giúp bạn tiết kiệm được rất nhiều boilerplate code khi sử dụng Tuple và muốn conform <code>Equatable</code>, <code>Comparable</code>, hay <code>Hashable</code> bởi vì Swift sẽ tự động infer nếu tất cả các types sử dụng trong tuple conforms với <code>Equatable</code>, <code>Comparable</code>, hay <code>Hashable</code> thì Tuple sẽ tự động conforms với các protocol này.</p><h1>Bài viết</h1><h2>Mã nguồn app Telegram</h2><p>Ở VN dùng nhiều Zalo nhưng mình sống ở Đức nơi mọi người rất chú ý vấn đề bảo mật nên app <a href="https://telegram.org/">Telegram</a> cũng khá phổ biến. App này <a href="https://github.com/TelegramMessenger/Telegram-iOS">mã nguồn mở trên github</a> để mọi người có thể audit tính bảo mật. Thế nhưng với hơn 200 modules và hơn 2 triệu dòng code, việc đọc hiểu mã nguồn không phải là việc đơn giản. Rất may bạn <a href="https://medium.com/@BoHu">Bo Hu</a> trên Medium có làm một serie bài viết walk through mã nguồn của app Telegram. Bài viết rất đáng tham khảo nếu các bạn muốn biết cách cấu trúc mã nguồn và xây dựng kiến trúc cho một hàng dùng lớn. Mời các bạn tham khảo <a href="https://medium.com/@BoHu/source-code-walkthrough-of-telegram-ios-part-1-adee673e2202">phần 1</a>, <a href="https://medium.com/@BoHu/source-code-walkthrough-of-telegram-ios-part-2-ssignalkit-afdf35ff60ba">phần 2</a>, <a href="https://medium.com/@BoHu/source-code-walkthrough-of-telegram-ios-part-3-other-foundations-66ace05954a4">phần 3</a> của series này.</p><h1>Mã nguồn</h1><h2>Bow Arch</h2><p>Trong <a href="(https://swiftvietnam.com/posts/2020-05-20_ban_tin_swift_vietnam_so_1/">Bản tin Swift Việt Nam số #1</a>) mình có giới thiệu kiến trúc mã nguồn mở The Composable Architecture. Đây là một kiến trúc uni-directional (kiểu Redux - React) thích hợp dùng để xây dựng ứng dụng lớn bằng cách chia nhỏ nó ra thành các component nhỏ hơn. Tình cờ trong tuần vừa rồi các bạn bên <a href="https://bow-swift.io">bow-swift</a> cũng giới thiệu một kiến trúc uni-directional tương tự như TCA có tên là <a href="https://github.com/bow-swift/bow-arch">bow-arch</a>. Bow Arch được xây dựng dựa trên thư viện <a href="https://github.com/bow-swift/bow">Functional Programming Bow</a>, được xây dựng dựa trên các <a href="https://github.com/bow-swift/bow-arch#-principles">nguyên tắc</a>:</p><ul><li>🎨 View as a function of state</li><li>🚧 Clear separation of concernsecific concern, and lets us separate how our code deals with different aspects of - application development.</li><li>📦 Modularity</li><li>✅ Testability</li><li>🧩 Highly polymorphic</li><li>🧮 Mathematical background</li></ul><p>Mình chưa có cơ hội để thử nghiệm kiến trúc này. Nếu bạn nào đã thử làm việc với kiến trúc này và muốn chia sẻ kinh nghiệm với cộng đồng thì <a href="https://twitter.com/antranapp">liên lạc với mình</a> nhé. Chi tiết về Bow Arch, các bạn có thể xem trên <a href="https://arch.bow-swift.io/">trang chủ</a>.</p><h2>Nuke 9.0</h2><p>Chắc hẳn mọi người ai cũng đã từng phải tải ảnh hoặc video từ remote servers và lưu lại cho các lần sử dụng sau trong ứng dụng của mình. <a href="https://github.com/onevcat/Kingfisher">Kingfisher</a> là thư viện khá nổi tiếng và phổ biến cho tác nghiệp này. Thế nhưng tuần này Kingfisher đã có một đối thủ đáng gờm, đó là thư viện Nuke, phát triển bởi <a href="https://twitter.com/a_grebenyuk">Alexander Grebenyuk</a>. Với phiên bản <a href="https://kean.github.io/post/nuke-9">9.0</a> (phiên bản này được phát triển trong 5 năm 🤯), Nuke hỗ trợ SwiftUI và Combine, có nhiều API mới, hỗ trợ nhiều định dạng ảnh mới, decode và process ảnh nhanh hơn etc.. Mọi thông tin chi tiết các bạn tham khảo trên <a href="https://kean.github.io/nuke">trang chủ của dự án</a> hoặc tham khảo <a href="https://github.com/kean/Nuke">mã nguồn</a> nhé.</p><h2>CombinePlaygrounds - Using Combine.</h2><p>Sắp WWDC20 rồi, Apple chắc chắn sẽ có nhưng nâng cấp đáng kể cho <a href="https://developer.apple.com/documentation/swiftui">SwiftUI</a> và <a href="https://developer.apple.com/documentation/combine">Combine</a> frameworks. Nếu bạn nào vẫn chưa có ý định học về SwiftUI và Combine thì có lẽ các bạn nên bắt đầu từ bây giờ. Mình tin rằng các dự án apps trong tương lại sẽ chủ yếu được xây dựng bằng 2 công nghệ này. Nếu bạn nào đã từng sử dụng các thử viện như <a href="https://github.com/ReactiveX/RxSwift">RxSwift</a> hay <a href="https://github.com/ReactiveCocoa/ReactiveSwift">ReactiveSwift</a> thì việc học Combine cũng hiểu <a href="http://reactivex.io/">Reactive Programming</a> sẽ đơn giản hơn. Nhưng nếu bạn chưa có nhiều kinh nghiệm với Reactive Programming thì việc hiểu các concept về xử lý dòng dữ liệu cũng như high-order functions không phải là chuyện một sớm một chiều. Anh bạn <a href="https://twitter.com/DenisPoifol">Denis Poifol</a> có làm một playground để giới thiệu về Combine <a href="https://github.com/denisPoifol/CombinePlaygrounds">tại đây</a>. Đọc code trên Playgrounds sẽ giúp bạn vừa hiểu về lý thuyết, lại vừa nhìn được code nên sẽ dễ tiếp thu được kiến thức hơn. Sau khi đọc xong cái Playgrounds trên và nắm được kiến thức cơ bản về Combine, mình recommend các bạn đọc tiếp trang <a href="https://heckj.github.io/swiftui-notes/">Using Combine</a> để tìm hiểu sau hơn nữa về Combine.</p><h1>Video</h1><h2>Machine Learning meets iOS</h2><p>Machine Learning đang là một mảng phát triển rất mạnh, đặc biết là ở trên các thiết bị cuối như iPhone, iPad khi mà khả năng xử lý của các thiết bị này ngày càng tăng. Có nhiều cách để ứng dụng Machine Learning trên iOS, nhưng cách phổ biến nhất là sử dụng <a href="https://developer.apple.com/documentation/coreml">CoreML</a>. Anh <a href="http://atoapps.com/">Minh Nguyễn</a>, Senior iOS Developer của công ty <a href="https://boot.AI">boot.AI</a> có trình bày trong video <a href="https://www.facebook.com/bootAI.RD.Center/videos/170997990820962">"Machine Learning meets iOS"</a> những ứng dụng cơ bản của CoreML cũng như 1 use case đo nhiệt độ cơ thể thông qua xử lý ảnh (rất quan trọng trong thời dịch Covid-19 :)). Các bạn có thể theo dõi video <a href="https://www.facebook.com/bootAI.RD.Center/videos/170997990820962">tại đây</a>.</p><h2>CS193p - Developing Apps for iOS</h2><p>Hai videos tiếp theo của serie <a href="https://cs193p.sites.stanford.edu/">học lập trình iOS với SwiftUI</a> của trường đại học Stanford đã được cập nhật trên Youtube.</p><ul><li><a href="https://www.youtube.com/watch?v=SIYdYpPXil4">Reactive UI Protocols Layout</a></li><li><a href="https://www.youtube.com/watch?v=eHEeWzFP6O4">Grid enum Optionals</a></li></ul><h2>Apps for All: Making Software Accessible</h2><p>Ngày 21.05.2020 vừa rồi là ngày "Global Accessibility Awareness Day" (mình chả biết dịch cái này sang tiếng Việt thế nào cho đúng 🤷‍♂️). Ý tưởng là khuyến các nhà phát triển các ứng dụng điện tử (apps, website, electronic devices etc... ) hãy để ý đến cả những người bị tàn tật hoặc khó tiếp cận các sản phẩm này hơn những người dùng bình thường khác. Chủ đề này có lẽ không phổ biến ở Việt Nam, nhưng ở Châu Âu và ở Mỹ, các yêu cầu này khá quan trọng. Mình đã từng phải ngồi hàng tuần đề test cái app của công ty bằng cách bịt mắt chỉ nghe voice over và sử dụng app để hoàn thiện phần accessiblity. Apple cũng cung cấp rất nhiều <a href="https://developer.apple.com/accessibility/">API</a> và tutorials trong app <a href="https://apps.apple.com/de/app/apple-developer/id640199958">Apple Developer</a> cho tác vụ này. Anh bạn <a href="https://www.youtube.com/user/magicpop">Matthew Bischoff</a> có <a href="https://www.youtube.com/watch?v=LHHmx5XxIBc">một video rất hay</a> về chủ đề này, mới các bạn tham khảo nhé.</p><h1>Soft Skills</h1><p>Đa số lập trình viên như chúng ta thường thích viết code hơn là đi nói chuyện với người hoặc làm các công việc không liên quan đến code. Rất tiếc là để làm được một ứng dụng nhiều người yêu thích và sử dụng bây giờ, chúng ta cần đầu tư vào nhiều skills khác nhau nữa như thiết kế, quản lý dự án, marketing etc.. Mình sẽ giới thiệu một số bài viết liên quan đến chủ đề này tại đây để các bạn tham khảo.</p><h2>Building a Design System for iOS</h2><p>Nếu các bạn làm việc ở các công ty lớn một chút, họ sẽ có đội ngũ thiết kế riêng và thường học sẽ có một Design System để sử dụng cho các sản phẩm của mình. Ví dụ như AirBnB, học có cả <a href="https://airbnb.design/">một trang web chuyên về ngôn ngữ thiết kế</a> của riêng mình. Các bạn chắc hẳn sẽ thắc mắc, vậy Design System là gì, làm sao để lập trình viên như chúng ta có thể hiểu và thậm chí tự tạo cho mình một design system riêng, làm sao chúng ta có thể biên dịch cái design system này từ Photoshop, Sketch, Figma hay bất kỳ một chương trình thiết kế nào sang Swift. Anh bạn <a href="https://www.ramshandilya.com/">Ram Shandilya</a> tuần vừa rồi có một series bài viết giới thiệu về Design System khá hay và dễ hiểu. Các bạn có thể tham khảo từ <a href="https://www.ramshandilya.com/blog/design-system-intro/">phần 1</a> nhé. Các bạn cũng có thể tham khảo thêm <a href="https://www.youtube.com/watch?v=Fvq8PQKJj_k&t=1053s">video này</a> để xem một cách tiếp cận Design System bằng Swift tương tự nhé.</p><h1>Apple</h1><h2>iOS 13.5</h2><p>Tuần vừa rồi Apple đã phát hành phiên bản iOS 13.5, nhận diện khẩu trang, nhưng quan trọng nhất là Exposure Notification Framework dành cho các app contact tracing phòng chống Covid-19.</p><p>Về mặt kỹ thuật, nguyên tắc ENF hoạt động tương đối giống các app contract tracing phát hanh trước dây như tracetogether của Singapore hoặc bluezone của Việt Nam: trao đổi anonymized IDs qua giao thức bluetooth giữa các máy tiếp xúc gần nhau. Nhưng với việc ENF được tích hợp trực tiếp vào hệ thống, các app sử dụng không phải luôn luôn mở ở foreground nữa mà có thể hoạt động ở background. Ngoải ra ENF cũng tương thích với một framework tương tự bên Android. Mình thấy việc Apple và Google bắt tay nhau phát triển ENF là một điều tuyệt vời, giúp giảm thiểu việc có quá nhiều protocols được phát triển độc lập không tương thích với nhau. Với việc là official framework của iOS và Android, người dùng cũng sẽ tin tưởng hơn và sẽ sử dụng các apps contract tracing nhiều hơn, dẫn đến nâng cao hiệu quả của việc chống dịch.</p><h2>Uncover Jailbreak</h2><p>Rất lâu rồi mình không jailbreak iPhone của mình nữa vì mình cũng không còn thời gian nghịch ngợm các Tweaks trên Cydia nữa. Nhưng gần đây có, cộng động Jailbreak lại dậy sóng vì tool <a href="https://unc0ver.dev/">unc0ver</a> có phát hiện ra lỗ hổng nào đó mà có thể jailbreak các phiên bản iOS từ iOS 11.0 đến 13.5.</p><p>Nói chung việc jailbreak hay không thì mỗi người có một ý kiến riêng. Bản thân mình sẽ không tọc mạch cái jailbreak này vì có nhiều thông tin các nhân trên điện thoại và mình không muốn bypass các security machanism của iOS khiến cho các thông tin cá nhân đó có thể bị lấy mất.</p><p>Ở Việt Nam mọi người thì chủ yếu jailbreak để dùng app chùa. Thế nhưng cũng có một số "ích lợi" khác cho việc jailbreak là dùng các Tweaks để nâng cấp một số tính năng cho iOS mà bạn không thể làm được nếu không jailbreak. Anh bạn <a href="https://twitter.com/steipete">Peter Steinberger</a> có bài viết tổng hợp pros và cons của việc jailbreak cũng như hướng dẫn jailbreak sử dụng tool unc0ver <a href="https://steipete.wtf/posts/jailbreaking-for-ios-developers/">tại đây</a>.</p><h2>iOS 14</h2><p>Chỉ còn chưa đến 1 tháng nữa là đến WWDC và gần như chắc chắn Apple sẽ giới thiệu iOS 14 với nhiều tính năng mới tại hội nghị này. Tuy nhiên những phiên bản đầu tiền của iOS 14 hiện đã bị leak ra ngoài và rất nhiều hacker và security researchers đang bắt đầu nghiên cứu tìm lỗ hổng của phiên bản iOS mới này. <a href="https://www.vice.com/en_us/article/5dzpxz/how-iphone-hackers-got-hands-on-new-ios-14-months-before-realease">Vice</a> có bài phân tích khá hay về thị trường đen buôn bán trao đổi các thông tin leak về các hệ điều hành của Apple.</p><p>Bên <a href="https://www.macrumors.com/2020/05/21/airpods-pro-assembled-vietnam/">9to5mac</a> cũng có tổng hợp các thông tin về phiên bản iOS 14 để các bạn tham khảo.</p><h1>Công cụ</h1><h2>Piranha</h2><p>Nếu các bạn đã từng làm feature flags, A/B Testings trong app của mình, chắc hẳn các bạn sẽ phải đi dọn dẹp các code thừa sau khi thí nghiệm A/B Testing thực hiện xong hoặc feature được rollout cho toàn bộ users của mình. Thường thì công việc này khá nhàm chán (ai lại thích đi xoá code đâu) nên rất nhiều teams lười cứ để code chết ở trong projects của mình. Thế nhưng nếu các bạn kỹ sư của Uber cũng lười như vậy thì chắc project của họ với hơn <a href="https://www.infoq.com/news/2020/04/uber-piranha-unreachable-code/">6000 feature flags</a> sẽ trở thành một mớ hỗn độn mất. Có lẽ chính vì thế mà Uber đã giới thiệu tool <a href="https://github.com/uber/piranha">Piranha</a> để hỗ trợ việc dọn dẹp các feature flags trong ứng dụng của mình. Giải thích đơn giản là bạn nhập tên của flag và expected behaviours, Piranha sẽ nghiêm cứu cấu trúc của mã nguồn và nhận biết các pattern liên quan đến cái feature flag đó và thay đổi và dọn dẹp các code không cần thiết cho chúng ta. Hy vọng sau đó projects của chúng ta vẫn dịch được và các tests đều mầu xanh :). Các bạn tham khảo thêm về Piranha tại <a href="https://eng.uber.com/piranha/">bài giới thiệu</a> hoặc tham khảo trực tiếp <a href="https://github.com/uber/piranha">mã nguồn</a> nhé.</p><h1>Vui</h1><p>Các bạn thấy có giống nhau không 😆</p><img src="../../Resources/Images/swiftvietnam/swift_communism.jpeg" alt="swift_communism"/><h1>Lời cuối</h1><p>Chỉ còn vài tuần nữa là WWDC20 sẽ diễn ra với rất nhiều thông tin liên quan đến Swift và Apple Ecosystem. Nếu các bạn hoặc công ty các bạn có sự kiện gì liên quan đến WWDC20 và muốn thông tin đến cộng đồng lập trình viên Swift, các bạn có thể liên lạc với mình qua <a href="https://twitter.com/antranapp">twitter</a>, hoặc <a href="https://github.com/antranapp">Github</a>, hoặc trực tiếp trên <a href="https://github.com/SwiftVietnam/SwiftVietnam">trang Github của SwiftVietnam</a>, mình sẽ thông báo tin tức đấy vào bản tin Swift Việt Nam tiếp theo.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://swiftvietnam.com/posts/2020-05-20_ban_tin_swift_vietnam_so_1</guid><title>Bản tin Swift Việt Nam #1</title><description>Bản tin Swift Việt Nam #1</description><link>https://swiftvietnam.com/posts/2020-05-20_ban_tin_swift_vietnam_so_1</link><pubDate>Wed, 20 May 2020 01:28:00 +0200</pubDate><content:encoded><![CDATA[<h1>Bản tin Swift Việt Nam #1</h1><p>Xin chào mừng các bạn đến số đầu tiên của <strong>"Bản tin Swift"</strong>. Tự giới thiệu mình tên là An, hiện đang làm iOS Engineer ở Đức. Tại <strong>"Bản tin Swift"</strong> mình sẽ tổng hợp các thông tin mới nhất liên quan đến ngôn ngữ lập trình Swift, về Apple ecosystem và về các vấn đề liên quan đến phát triển ứng dụng cho Apple platforms.</p><p>Có nhiều lý do tại sao mình lại bắt đầu <strong>"Bản tin Swift"</strong>:</p><ul><li>Mình viết Swift hàng ngày, cả ở công việc lẫn hobby :)</li><li>Mình thích Swift và thường xuyên đọc nhiều thông tin về Swift.</li><li>Mình thích viết app cho Apple platforms.</li><li>Mình muốn chia sẻ kiến thức và thông tin mình cập nhật được với nhiều người.</li><li>Minh muốn kết nối cộng đồng lập trình viên iOS Việt Nam để chúng ta có thể chia sẻ thông tin, cơ hội làm việc cũng như cùng nhau phát triển.</li></ul><p>Các bạn có thể truy cập trang web chính của <strong>"Bản tin Swift"</strong> tại: <a href="https://swiftvietnam.com">https://swiftvietnam.com</a></p><h1>Tin tức</h1><h2>Swift 5.3 có gì mới?</h2><p>Anh bạn <a href="https://twitter.com/twostraws">Paul Hudson</a> có tổng hợp những Swift Evolution đã được implemented trong phiên bản <a href="https://swift.org/blog/5-3-release-process/">Swift 5.3</a>. Các bạn có thể xem <a href="https://www.whatsnewinswift.com/?from=5.2&to=5.3">tại đây</a> để biết thêm chi tiết. Các bạn cũng có thể tải <a href="https://www.whatsnewinswift.com/files/playground-5-2-to-5-3.playground.zip">playground</a> này xuống để xem trực tiếp code.</p><p>Mình tóm lược các Swift Evolution đã được cập nhật trong Swift 5.3:</p><ul><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0276-multi-pattern-catch-clauses.md">SE-0276</a> Multi-pattern catch clauses: bắt nhiều exceptions trong cùng một lúc.</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0279-multiple-trailing-closures.md">SE-0279</a> Multiple trailing closures: cái SE này bị cộng đồng chỉ trích khá nhiều vì chẳng có ích mấy mà còn làm code khó đọc hơn. Nhưng mình dự đoán là Apple sẽ giới thiệu 1 cái gì đó ở WWDC mà cái SE sẽ makes sense.</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0266-synthesized-comparable-for-enumerations.md">SE-0266</a> Synthesized Comparable conformance for enums: so sánh các case trong một enum nếu enum conform to <code>Comparable</code></li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0269-implicit-self-explicit-capture.md">SE-0269</a> <code>self</code> is no longer required in many places: bớt phải viết <code>self</code> nếu Compiler có thể đảm bảo là không thể có reference cycle. Đặc biệt hữu dụng khi dùng <code>SwiftUI</code> hay <code>Combine</code></li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0281-main-attribute.md">SE-0281</a> Type-Based Program Entry Points</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0267-where-on-contextually-generic.md">SE-0267</a> <code>where</code> clauses on contextually generic declarations</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0270-rangeset-and-collection-operations.md">SE-0270</a> New collection methods on noncontiguous elements</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0268-didset-semantics.md">SE-0268</a> Refined didSet Semantics</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0277-float16.md">SE-0277</a> A new Float16 type</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0271-package-manager-resources.md">SE-0271</a> Swift Package Manager gains binary dependencies, resources, and more: Cái này rất hay vì chúng ta sẽ có thể sử dụng được SPM cho các packge có chứa ảnh, âm thanh, JSON, plist hay bất cứ resource nào khác. Trước đây SPM chỉ hỗ trợ package chứa code thôi.</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0272-swiftpm-binary-dependencies.md">SE-0272</a> Package Manager Binary Dependencies : yay, Google có thể sử dụng SPM để package Firebase được rồi.</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0273-swiftpm-conditional-target-dependencies.md">SE-0273</a> Package Manager Conditional Target Dependencies: sử dụng các package khác nhau phụ thuộc vào platform.</li></ul><p>Đặc biệt là Swift 5.3 sẽ chính thức hỗ trợ Windows và một số <a href="https://swift.org/blog/additional-linux-distros/">distro Linux khác</a> (hiện chỉ hỗ trợ chính thức Ubuntu). Mình đã dùng Swift 5.2 để tạo <a href="https://swiftvietnam.com">SwiftVietnam</a> trên Linux Ubuntu. Mình có viết về trải nghiệm của mình <a href="https://swiftvietnam.com/posts/2020-19-04_use_publish_to_create_static_websites/">tại đây</a>.</p><h2>Lan truyền lỗi giữa các tầng trong cấu trúc của ứng dụng bằng Swift</h2><p>Anh bạn <a href="https://twitter.com/johnsundell">John Sundell</a> thảo luận về việc propagate lỗi trong các tầng thấp lên tầng trên trong cấu trúc ứng dụng. John cũng giới thiệu kỹ thuật dùng <code>enum</code> để group các lỗi cùng loại cho dễ xử lỹ.</p><p>Các bạn có thể đọc thêm chi tết <a href="https://www.swiftbysundell.com/articles/propagating-user-facing-errors-in-swift/">tại đây</a></p><h1>Video - Audio</h1><h2>CS193p - Developing Apps for iOS</h2><p>Khoá học phát triển ứng dụng iOS nổi tiếng của trường đại học Standford hiện đang được làm mới và sử dụng SwiftUI 100%. Khoá học này hoàn toàn miễn phí, chỉ tiếc là không có chứng chỉ cho những ai không phải là sinh viên của Standford 😔.</p><p>Các bạn có thể xem video của khoá học trên Youtube. Link được cập nhật tại đây: <a href="https://cs193p.sites.stanford.edu/">https://cs193p.sites.stanford.edu/</a></p><h2>App Builders 2020</h2><p><a href="https://appbuilders.ch/">App Builder</a> là một conference về phát triển ứng dụng được tổ chức ở Thuỵ Sĩ. Conference này khá nổi tiếng ở Châu Âu và thường mời được rất nhiều Speakers có uy tín về thuyết trình. Năm nay vì Covid-19 nên họ tổ chức online và videos đã được cập nhật trên Youtube.</p><p>Các bạn xem chi tiết <a href="https://www.youtube.com/watch?v=LpHah3oQeyg&list=PLLcE3DL3f5ByDAucPjzNRG_hPtYDvYlIA">tại đây</a></p><h2>Podcast: Polymorphic interfaces</h2><p>Trong podcast gần đây, John Sundell có phỏng vấn Dave Abrahams, một trong những người tạo ra ngôn ngữ Swift, về "Lập trình hướng Protocol - Protocol-Oriented Programming".</p><p>Nếu bạn chưa biết <strong>Dave Abrahams</strong> là ai hay không biết "Protocol-Oriented Programming" là gì, mình recommend các bạn xem lại video <a href="https://developer.apple.com/videos/play/wwdc2015/408/">Protocol-Oriented Programming in Swift</a> từ WWDC 2015</p><p>Quay lại Podcast của giữ John và Dave, họ thảo luận khá nhiều về tại sao Swift lại nhấn mạnh hướng đối tượng, C++ có ảnh hưởng thế nào đến Swift, Generic Programming là gì và đặc biệt là tại sao Dave không còn làm việc ở Apple nữa.</p><p>Các bạn có thể nghe podcast <a href="https://www.swiftbysundell.com/podcast/71/">tại đây</a></p><h1>Thư viện - Mã nguồn</h1><h2>The Composable Architecture:</h2><p>Nếu các bạn muốn phát triển ứng dụng scalable và maintainable, chắc chắc các bạn sẽ nghĩ đến việc chia nhỏ ứng dụng của mình thành các thành phần nhỏ hơn. Các anh bạn ở <a href="https://pointfree.co">pointfree.co</a> mới phát hành một cấu trúc có tên là <a href="https://github.com/pointfreeco/swift-composable-architecture">The Compossable Architecture</a> (TCA) một vài tuần trước giúp các bạn có thể xây dựng ứng dung (SwiftUI và UIKit) theo cách lắp ghép các thành phần nhỏ lại với nhau.</p><p>Trên <a href="https://www.pointfree.co/">pointfree.co</a> các bạn có thể theo dõi 3 videos gần nhất để xem họ giới thiệu về TCA nhé.</p><p>Đặc biệt nếu bạn muốn học thêm về Functional Programming và xem các video (mất tiền) bổ ích khác trên <a href="https://www.pointfree.co/">pointfree.co</a>, đặc biệt là các bạn ở Việt Nam, các bạn có thể xem mình có được <a href="https://www.pointfree.co/subscribe/personal?useRegionalDiscount=true">áp dụng giảm giá</a> không nhé. Điều kiện là bạn trả tiền bằng thẻ tín dụng issued ở Việt Nam.</p><h2>ACHNBrowserUI</h2><p>Mình không chơi Animal Crossing nhưng thấy rất nhiều người đang điên cuồng vì trò chơi này. Nếu bạn đang chơi trò này và muốn học SwiftUI, Combine thì bạn có thể tham khảo cái App <a href="https://github.com/Dimillian/ACHNBrowserUI">ACHNBrowserUI</a> này nhé. Mã mở hoàn toàn. App được viết bởi anh chàng <a href="https://github.com/Dimillian">Thomas Ricouard</a>, người đã gây bão trong cộng đồng Swift vì là một trong những người viết <a href="https://github.com/Dimillian/MovieSwiftUI">ứng dụng bằng SwiftUI đầu tiên</a>.</p><h1>Tools:</h1><h2>Concurrent Carthage</h2><p>Chắc mọi người đã biết và dùng <code>Carthage</code> để quản lý thử viện bên thứ ba cho ứng dụng của mình. Nếu bạn để ý thì <code>Carthage</code> khá là chậm nếu bạn có nhiều dependency. <a href="https://github.com/unchartedworks/ConcurrentCarthage">Concurrent Carthage</a> là một công cụ mới dùng để giúp <code>Carthage</code> sử dụng tối đang các core trên máy tính để tăng tốc.</p><h1>Apple</h1><h2>Apple Glass</h2><p>Anh chàng John Prosser, một leaker về các sản phẩm của Apple khá nổi tiếng, vừa phát hành một video lean về Apple Glass trên <a href="https://www.youtube.com/watch?v=SfjSy6T4iE4">Youtube</a> Apple đầu tư khá nhiều vào AR mấy năm gần đây. Mình sống ở Munich, Đức và là nơi Apple đã <a href="https://techcrunch.com/2015/05/28/apple-metaio/">mua một công ty AR</a>, khởi nguồn cho ARKit và các công nghệ AR của Apple. Mình có dùng một số AR apps trên điện thoại, thực ra cũng không thấy hay lắm. Cái Apple Glass chắc chắn thích hợp cho việc sử dụng app AR hơn là điện thoại.</p><p>Tiện nói về AR, mình có xem <a href="https://arcopypaste.app/">cái demo này</a> rất cool 😉.</p><h1>Vui</h1><p>Các bạn có biết chữ <code>NS</code> (ví dụ trong <code>NSObject</code>) viết tắt cho cái gì không?</p><p>Đáp án <a href="https://twitter.com/manicakes/status/1259851414622425092">ở đây</a> nhé 😉</p><h1>Lời cuối</h1><p>Puh, viết một bài tổng hợp cũng không phải đơn giản. Bây giờ là hơn 1h đêm rồi mà mình vẫn không biết bài viết có đủ thông tin hay ho cho mọi người không. Nhưng giờ thì mệt quá rồi nên mình xin ngừng <s>bút</s> phím ở đây. Hy vọng "Bản Tin Swift" số #1 mang lại cho các bạn một số thông tin hữu ích về cộng đồng Swift thế giới.</p><p>Mục đích chính của SwiftVietnam là community-driven 🤝. Chỉ có vậy chúng ta mới có thể cùng nhau phát triển được. Nếu mọi người muốn đóng góp chia sẻ thông tin cho <strong>"Bản tin Swift #2"</strong> thì mời các bạn vào thảo luận <a href="https://github.com/SwiftVietnam/SwiftVietnam/issues/1">tại đây</a> nhé 💪.</p><p>Mình rất muốn tìm và chia sẻ các thông tin về iOS/Apple/Swift với các bạn lập trình viên Việt Nam. Nếu bạn có ý kiến, ý tưởng, chỉ trích hay đóng góp gì cho bài viết, các bạn có thể liên lạc với mình trên <a href="https://twitter.com/antranapp">Twitter</a> hoặc <a href="https://github.com/antranapp">Github</a>. Rất mong nhận được ý kiến đóng góp của các bạn.</p><p>Các bạn cũng nhớ theo dõi trang <a href="https://www.facebook.com/Swift-Vi%E1%BB%87t-Nam-396835394265318">Facebook Swift Việt Nam</a> để được cập nhật các thông tin mới nhất về <s>Taylor</s> Swift nhé 😋.</p><p>Chào thân ái.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://swiftvietnam.com/posts/2020-04-19_use_publish_to_create_static_websites</guid><title>Publishing a blog using Swift for Linux (Ubuntu 18.04)</title><description>Publishing a blog using Swift for Linux (Ubuntu 18.04).</description><link>https://swiftvietnam.com/posts/2020-04-19_use_publish_to_create_static_websites</link><pubDate>Sun, 19 Apr 2020 21:28:00 +0200</pubDate><content:encoded><![CDATA[<h1>Publishing a blog using Swift for Linux (Ubuntu 18.04)</h1><p><a href="https://github.com/JohnSundell/Publish">Publish</a> is a static site generator built with Swift, created by the famous <a href="swiftbysundell.com">John Sundell</a> to run his blog.</p><p>This tutorial is going to show you how to install Publish on a Linux machine running Ubuntu 18.04 LTS and how to publish the generated site to Github Pages and connect it with a custom domain.</p><p>As you might guess, this blog post is generated by <strong>Publish</strong>, and hosted on Github Pages under the domain <a href="https://swiftvietnam.com">https://swiftvietnam.com</a>. <strong>The project is open-sourced on Github:</strong> <a href="https://github.com/antranapp/swiftvietnam">https://github.com/antranapp/swiftvietnam</a></p><h2>1. Install Swift 5.2.2 on Ubuntu 18.04 LTS</h2><p>The following steps show how to install the currently latest version of Swift 5.2.2 on Ubuntu 18.04 LTS. Since Swift supports other Linux distributions too, you should be able to install Swift on most of the Linux systems.</p><h3>Step 1: Install dependencies</h3><p><code>clang</code> and <code>libicu-dev</code> are required as dependencies for running Swift on Linux machines</p><ul><li><code>clang</code> provides tooling infrastructure for programming languages in the C programming languages. It acts as a compiler.</li><li><code>libicu-dev</code> provides full-featured Unicode and locale support. This allows for Unicode to be used in our code.</li></ul><p>We can install those dependencies by running the following code:</p><pre><code><div class="highlight"><span></span>sudo apt install clang libicu-dev
</div></code></pre><h3>Step 2: Download the Swift binary</h3><p>Apple releases many pre-compiled binary builds for Swift on the official <a href="https://swift.org/download">Swift website</a>.</p><p>We are going to download the build for Ubuntu 18.04 LTS using the following commands and unpack it into <code>swift</code> folder:</p><pre><code><div class="highlight"><span></span>mkdir ~/swift
<span class="nb">cd</span> ~/swift
wget https://swift.org/builds/swift-5.2.2-release/ubuntu1804/swift-5.2.2-RELEASE/swift-5.2.2-RELEASE-ubuntu18.04.tar.gz
tar -xvzf swift-5.2.2-RELEASE*
</div></code></pre><h3>Step 3: Add swift binary to PATH</h3><p>To execute <code>swift</code> command from anywhere, we need to add the path to the <code>swift</code> binary into our PATH environment variable.</p><p>We can find the path to the swift binary using <code>pwd</code> command:</p><pre><code><div class="highlight"><span></span><span class="nb">cd</span> ~/swift/swift-5.2.2-RELEASE-ubuntu18.04/usr/bin
<span class="nb">pwd</span>
</div></code></pre><p>Copy the output of the above command and add it into our <code>PATH</code>, ideally in <code>.bashrc</code> file to keep the change permanently.</p><pre><code><div class="highlight"><span></span><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$HOME</span>/bin/swift-5.2.2-RELEASE-ubuntu18.04/usr/bin
</div></code></pre><p>Remember to restart the session or run <code>source ~/.bashrc</code> before continue.</p><h3>Step 4: Testing</h3><p>Now you test if you can call <code>swift</code> command.</p><pre><code><div class="highlight"><span></span>swift -v
</div></code></pre><p>The output should be something like:</p><pre><code><div class="highlight"><span></span>Swift version <span class="m">5</span>.2.2 <span class="o">(</span>swift-5.2.2-RELEASE<span class="o">)</span>
Target: x86_64-unknown-linux-gnu
</div></code></pre><h2>2. Install Visual Studio Code plugin (optional)</h2><p>Since Xcode is not available for Linux system, and we are going to build our website using Swift, it would be good if we have some kind of IDE to aid the process.</p><p>Currently, we have 3 options for swift IDEs:</p><ul><li><strong>Option 1</strong>: Using any text editors or IDEs to edit the source code and run <code>swift build</code> or <code>publish generate</code> from command line to build our project. Probably, we will not have any code highlighting, source code references, auto-completion and IDE integrations.</li><li><strong>Option 2</strong>: <a href="https://www.jetbrains.com/clion/">CLion</a> from JetBrains: It is actually a C/C++ IDE but it has a plugin to support Swift source code. All JetBrains IDEs are excellent for sure, but it is not free.</li><li><strong>Option 3</strong>: Using Visual Studio Code together with SourceKit-LSP to have a good enough IDE to start writing and debugging Swift code.</li></ul><p>I'm going to show you how to do the <strong>option 3</strong>: integration of SourceKit-LSP in Visual Studio Code.</p><h3>Step 1: Build SourceKit-LSP</h3><p>Apple announced the SourceKit-LSP in August 2018 and released the open-source project in November 2018. As written in <a href="https://github.com/apple/sourcekit-lsp">its official repository</a>:</p><blockquote><p>SourceKit-LSP is an implementation of the <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a> (LSP) for Swift and C-based languages. It provides features like code-completion and jump-to-definition to editors that support LSP. SourceKit-LSP is built on top of <code>sourcekitd</code> and <code>clangd</code> for high-fidelity language support, and provides a powerful source code index as well as cross-language support. SourceKit-LSP supports projects that use the Swift Package Manager.</p></blockquote><p>We are going to build <code>SourceKit-LSP</code> from its source, and copy the built binary to <code>/usr/local/bin</code></p><pre><code><div class="highlight"><span></span>git clone https://github.com/apple/sourcekit-lsp.git
<span class="nb">cd</span> sourcekit-lsp
sudo apt install libsqlite3-dev libncurses5-dev
swift build -Xcxx -I<span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/bin/swift-5.2.2-RELEASE-ubuntu18.04/usr/lib/swift -Xcxx -I<span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/bin/swift-5.2.2-RELEASE-ubuntu18.04/usr/lib/swift/Block
sudo mv .build/x86_64-unknown-linux-gnu/debug/sourcekit-lsp /usr/local/bin
</div></code></pre><p><strong><em>Note:</em></strong></p><ul><li>You need to use the correct path to your <code>swift</code> binary in the command. I used mine here for easy understanding.</li><li>You might need to install additional dependencies depending on what packages are available on your machines.</li></ul><h3>Step 2: Build VSCode extension</h3><p>If you don't have Visual Studio Code installed yet, please follow <a href="https://code.visualstudio.com/docs/setup/linux">this instruction</a> to install it. The most simple way is to use <code>snap</code></p><pre><code><div class="highlight"><span></span>sudo snap install --classic code
</div></code></pre><p>We also need <code>node</code> and <code>npm</code> to build our custom Visual Studio Code extension. The installation instruction for Ubuntu can be found <a href="https://github.com/nodesource/distributions/blob/master/README.md#debinstall">here</a></p><pre><code><div class="highlight"><span></span>curl -sL https://deb.nodesource.com/setup_12.x <span class="p">|</span> sudo -E bash -
sudo apt-get install -y nodejs
</div></code></pre><p>Now, inside the <code>sourcekit-lsp</code> folder, run the following commands to create and install the extension for Visual Studio Code.</p><pre><code><div class="highlight"><span></span><span class="nb">cd</span> Editors/vscode
npm run createDevPackage 
code --install-extension out/sourcekit-lsp-vscode-dev.vsix
</div></code></pre><h2>3. Install <code>Publish</code></h2><p>We will now install <code>Publish</code> from its <a href="https://github.com/JohnSundell/Publish">source code</a>:</p><pre><code><div class="highlight"><span></span>git clone https://github.com/JohnSundell/Publish.git
<span class="nb">cd</span> Publish
make
</div></code></pre><p>If you get permission errors like this:</p><pre><code><div class="highlight"><span></span>install .build/release/publish-cli /usr/local/bin/publish
install: cannot create regular file <span class="s1">&#39;/usr/local/bin/publish&#39;</span>: Permission denied
Makefile:2: recipe <span class="k">for</span> target <span class="s1">&#39;install&#39;</span> failed
</div></code></pre><p>You should run <code>install</code> command with <code>sudo</code> instead:</p><pre><code><div class="highlight"><span></span>sudo install .build/release/publish-cli /usr/local/bin/publish
</div></code></pre><p>Now if you run <code>publish</code> from the command line. You will see something like this:</p><img src="../../Images/1/publish_installed_successfully.png" alt="preview"/><h2>4. Create a new website</h2><h3>Step 1: Create a new project</h3><p>Now we can use <code>publish</code> command to create a new website:</p><pre><code><div class="highlight"><span></span>mkdir SwiftVietnam
publish new
</div></code></pre><p>Open the newly created folder in Visual Studio Code:</p><pre><code><div class="highlight"><span></span><span class="nb">cd</span> SwiftVietnam
code .
</div></code></pre><p>To connect to the Swift Toolchain and SourceKit-LSP with Visual Studio Code, we need to create some setting files under <code>.vscode</code> in our workspace:</p><ul><li><strong>settings.json</strong>: set the path to the swift tool chain</li></ul><pre><code><div class="highlight"><span></span><span class="p">{</span>
  <span class="nt">&quot;sourcekit-lsp.toolchainPath&quot;</span><span class="p">:</span> <span class="s2">&quot;$HOME/bin/swift-5.2.2-RELEASE-ubuntu18.04/usr/bin&quot;</span>
<span class="p">}</span>
</div></code></pre><p>With this, we will be able to see class references for our Swift code:</p><img src="../../Images/1/publish_vscode.png" alt="preview"/><ul><li><strong>tasks.json</strong>: set the configuration so that we can run the project directly from VSCode by pressing <code>F5</code></li></ul><pre><code><div class="highlight"><span></span><span class="p">{</span>
  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;2.0.0&quot;</span><span class="p">,</span>
  <span class="nt">&quot;tasks&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;swift-build&quot;</span><span class="p">,</span> 
      <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> 
      <span class="nt">&quot;command&quot;</span><span class="p">:</span> <span class="s2">&quot;swift build&quot;</span> 
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</div></code></pre><p>We can also configure the debugger for our Swift project by installing <code>CodeLLDB</code> extension and creating <code>launch.json</code> in <code>.vscode</code> folder:</p><ul><li><strong>launch.json</strong>:</li></ul><pre><code><div class="highlight"><span></span><span class="p">{</span>
  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.2.0&quot;</span><span class="p">,</span>
  <span class="nt">&quot;configurations&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;lldb&quot;</span><span class="p">,</span> 
      <span class="nt">&quot;request&quot;</span><span class="p">:</span> <span class="s2">&quot;launch&quot;</span><span class="p">,</span>
      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Debug&quot;</span><span class="p">,</span>
      <span class="nt">&quot;program&quot;</span><span class="p">:</span> <span class="s2">&quot;${workspaceFolder}/.build/debug/SwiftVietnam&quot;</span><span class="p">,</span> 
      <span class="nt">&quot;args&quot;</span><span class="p">:</span> <span class="p">[],</span>
      <span class="nt">&quot;cwd&quot;</span><span class="p">:</span> <span class="s2">&quot;${workspaceFolder}&quot;</span><span class="p">,</span>
      <span class="nt">&quot;preLaunchTask&quot;</span><span class="p">:</span> <span class="s2">&quot;swift-build&quot;</span> 
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</div></code></pre><p>Now we can use running and debugging capabilities of VSCode for our project: <img src="../../Images/1/publish_debug.png" alt="debugging"/></p><h2>5. Test and publish to Github Pages</h2><h3>Step 1: Testing locally</h3><p>To test the site locally, we can run:</p><pre><code><div class="highlight"><span></span>publish run
</div></code></pre><p>The generated website will be created in the <code>Output</code> folder. And a local server will be started at <code>http://localhost:8000</code>. We can now just open that address in our browser to review the site.</p><img src="../../Images/1/publish_new.png" alt="preview"/><h3>Step 2: Setting up a custom domain</h3><p>If you want to use a custom domain with your Github Pages, please follow the <a href="https://help.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site">official instruction</a> from Github to customize the domain name.</p><h3>Step 3: Push <code>Output</code> folder to remote</h3><p><code>Publish</code> has an extensible <code>DeploymentMethod</code> API which can be used to implement different deployment methods. Unfortunately, deployment to Github Pages is not a built-in feature. At the time of writing, there is a pull request which implements GithubPages Deploymentmethod, but it is still being developed.</p><p>Since publishing to GitHub pages is quite easy, we can alternatively write some shell scripts to push code from the <code>Output</code> folder to the <code>gh-pages</code> branch of our repository and configure the repository to serve our static website from the <code>gh-pages</code> branch.</p><p>The <code>deploy.sh</code> script looks like following:</p><pre><code><div class="highlight"><span></span><span class="ch">#!/bin/sh</span>

<span class="c1">## Rebuild the website</span>
publish generate

<span class="c1">## Add custom domain CNAME</span>
<span class="nb">echo</span> <span class="s2">&quot;swiftvietnam.com&quot;</span> &gt; Output/CNAME

<span class="c1">## Add files to git</span>
git add .
git commit -m <span class="s2">&quot;Update production&quot;</span>
git push origin master

<span class="c1">## Deploy to gh-pages</span>
<span class="nb">echo</span> <span class="s2">&quot;--&gt; Deploy to live server --&gt;&quot;</span>
git subtree push --prefix Output origin gh-pages
</div></code></pre><h2>6. Conclusion:</h2><p>In this tutorial, we have created a foundation for our static-generated website by finishing many configuration tasks:</p><ul><li>Created a complete swift development environment on Ubuntu 18.04 LTS with Visual Studio Code and SourceKit-LSP</li><li>Installed <code>Publish</code> tool to create and publish our website</li><li>Tested and published the first version of our website to Github Pages, running on a custom domain.</li></ul><p>In future posts, we will investigate how to use <a href="https://github.com/JohnSundell/Plot">Plot</a> to change the UI, to use <a href="https://github.com/JohnSundell/Splash">Splash</a> for syntax highlighting for Swift and to create different sections for our website.</p><p>Further in-depth resources and explanations can be found in the following links:</p><ul><li><a href="https://github.com/antranapp/swiftvietnam">SwiftVietnam's Github repository</a></li><li><a href="https://www.swiftbysundell.com/videos/static-site-generation-in-swift/">(Video) Static site generation in Swift</a></li><li><a href="https://github.com/JohnSundell/Publish">Publish's Github repository</a></li><li><a href="https://swift.org/download/#using-downloads">Swift installation instruction</a></li><li><a href="https://github.com/apple/sourcekit-lsp">SourceKit-LSP</a></li><li><a href="https://swiftvietnam.com//www.raywenderlich.com/8325890-a-complete-guide-to-swift-development-on-linux">A Complete Guide to Swift Development on Linux</a></li></ul>]]></content:encoded></item></channel></rss>