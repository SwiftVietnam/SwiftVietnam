<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Swift Vietnam Community</title><description>A community for Vietnamese Swift enthusiasts.</description><link>https://swiftvietnam.com</link><language>en</language><lastBuildDate>Wed, 20 May 2020 09:42:57 +0200</lastBuildDate><pubDate>Wed, 20 May 2020 09:42:57 +0200</pubDate><ttl>250</ttl><atom:link href="https://swiftvietnam.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://swiftvietnam.com/posts/2020-05-20_ban_tin_swift_vietnam_so_1</guid><title>Bản tin Swift #1</title><description>Bản tin Swift Việt Nam #1</description><link>https://swiftvietnam.com/posts/2020-05-20_ban_tin_swift_vietnam_so_1</link><pubDate>Wed, 20 May 2020 01:28:00 +0200</pubDate><content:encoded><![CDATA[<h1>Bản tin Swift #1</h1><p>Xin chào mừng các bạn đến số đầu tiên của <strong>"Bản tin Swift"</strong>. Tự giới thiệu mình tên là An, hiện đang làm iOS Engineer ở Đức. Tại <strong>"Bản tin Swift"</strong> mình sẽ tổng hợp các thông tin mới nhất liên quan đến ngôn ngữ lập trình Swift, về Apple ecosystem và về các vấn đề liên quan đến phát triển ứng dụng cho Apple platforms.</p><p>Có nhiều lý do tại sao mình lại bắt đầu <strong>"Bản tin Swift"</strong>:</p><ul><li>Mình viết Swift hàng ngày, cả ở công việc lẫn hobby :)</li><li>Mình thích Swift và thường xuyên đọc nhiều thông tin về Swift.</li><li>Mình thích viết app cho Apple platforms.</li><li>Mình muốn chia sẻ kiến thức và thông tin mình cập nhật được với nhiều người.</li><li>Minh muốn kết nối cộng đồng lập trình viên iOS Việt Nam để chúng ta có thể chia sẻ thông tin, cơ hội làm việc cũng như cùng nhau phát triển.</li></ul><p>Các bạn có thẻ truy cập trang web chính của <strong>"Bản tin Swift"</strong> tại: <a href="https://swiftvietnam.com">https://swiftvietnam.com</a></p><h1>Tin tức</h1><h2>Swift 5.3 có gì mới?</h2><p>Anh bạn <a href="https://twitter.com/twostraws">Paul Hudson</a> có tổng hợp những Swift Evolution đã được implemented trong phiên bản <a href="https://swift.org/blog/5-3-release-process/">Swift 5.3</a>. Các bạn có thể xem <a href="https://www.whatsnewinswift.com/?from=5.2&to=5.3">tại đây</a> để biết thêm chi tiết. Các bạn cũng có thể tải <a href="https://www.whatsnewinswift.com/files/playground-5-2-to-5-3.playground.zip">playground</a> này xuống để xem trực tiếp code.</p><p>Mình tóm lược các Swift Evolution đã được cập nhật trong Swift 5.3:</p><ul><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0276-multi-pattern-catch-clauses.md">SE-0276</a> Multi-pattern catch clauses: bắt nhiều exceptions trong cùng một lúc.</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0279-multiple-trailing-closures.md">SE-0279</a> Multiple trailing closures: cái SE này bị cộng đồng chỉ trích khá nhiều vì chẳng có ích mấy mà còn làm code khó đọc hơn. Nhưng mình dự đoán là Apple sẽ giới thiệu 1 cái gì đó ở WWDC mà cái SE sẽ makes sense.</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0266-synthesized-comparable-for-enumerations.md">SE-0266</a> Synthesized Comparable conformance for enums: so sánh các case trong một enum nếu enum conform to <code>Comparable</code></li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0269-implicit-self-explicit-capture.md">SE-0269</a> <code>self</code> is no longer required in many places: bớt phải viết <code>self</code> nếu Compiler có thể đảm bảo là không thể có reference cycle. Đặc biệt hữu dụng khi dùng <code>SwiftUI</code> hay <code>Combine</code></li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0281-main-attribute.md">SE-0281</a> Type-Based Program Entry Points</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0267-where-on-contextually-generic.md">SE-0267</a> <code>where</code> clauses on contextually generic declarations</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0270-rangeset-and-collection-operations.md">SE-0270</a> New collection methods on noncontiguous elements</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0268-didset-semantics.md">SE-0268</a> Refined didSet Semantics</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0277-float16.md">SE-0277</a> A new Float16 type</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0271-package-manager-resources.md">SE-0271</a> Swift Package Manager gains binary dependencies, resources, and more: Cái này rất hay vì chúng ta sẽ có thể sử dụng được SPM cho các packge có chứa ảnh, âm thanh, JSON, plist hay bất cứ resource nào khác. Trước đây SPM chỉ hỗ trợ package chứa code thôi</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0272-swiftpm-binary-dependencies.md">SE-0272</a> Package Manager Binary Dependencies : yay, Google có thể sử dụng SPM để package Firebase được rồi.</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0273-swiftpm-conditional-target-dependencies.md">SE-0273</a> Package Manager Conditional Target Dependencies: sử dụng các package khác nhau phụ thuộc vào platform.</li></ul><p>Đặc biệt là Swift 5.3 sẽ chính thức hỗ trợ Windows và một số <a href="https://swift.org/blog/additional-linux-distros/">distro Linux khác</a> (hiện chỉ hỗ trợ chính thức Ubuntu). Mình đã dùng Swift 5.2 để tạo <a href="https://swiftvietnam.com">SwiftVietnam</a> trên Linux Ubuntu. Mình có viết về trải nghiệm của mình <a href="https://swiftvietnam.com/posts/2020-19-04_use_publish_to_create_static_websites/">tại đây</a>.</p><h2>Lan truyền lỗi giữa các tầng trong cấu trúc của ứng dụng bằng Swift</h2><p>Anh bạn <a href="https://twitter.com/johnsundell">John Sundell</a> thảo luận về việc propagate lỗi trong các tầng thấp lên tầng trên trong cấu trúc ứng dụng. John cũng giới thiệu kỹ thuật dung <code>enum</code> để group các lỗi cùng loại cho dễ xử lỹ.</p><p>Các bạn có thể đọc thêm chi tết <a href="https://www.swiftbysundell.com/articles/propagating-user-facing-errors-in-swift/">tại đây</a></p><h1>Video - Audio</h1><h2>CS193p - Developing Apps for iOS</h2><p>Khoá học phát triển ứng dụng iOS nổi tiếng của trường đại học Standford hiện đang được làm mới và sử dụng SwiftUI 100%. Khoá học này hoàn toàn miễn phí, chỉ tiếc là không có chứng chỉ cho những ai không phải là sinh viên của Standford 😔.</p><p>Các bạn có thể xem video của khoá học trên Youtube. Link được cập nhật tại đây: <a href="https://cs193p.sites.stanford.edu/">https://cs193p.sites.stanford.edu/</a></p><h2>App Builders 2020</h2><p><a href="https://appbuilders.ch/">App Builder</a> là một conference về phát triển ứng dụng được tổ chức ở Thuỵ Sĩ. Conference này khá nổi tiếng ở Châu Âu và thường mời được rất nhiều Speakers có uy tín về thuyết trình. Năm nay vì Covid-19 nên họ tổ chức online và videos đã được cập nhật trên Youtube.</p><p>Các bạn xem chi tiết <a href="https://www.youtube.com/watch?v=LpHah3oQeyg&list=PLLcE3DL3f5ByDAucPjzNRG_hPtYDvYlIA">tại đây</a></p><h2>Podcast: Polymorphic interfaces</h2><p>Trong podcast gần đây, John Sundell có phỏng vấn Dave Abrahams, một trong những người tạo ra ngôn ngữ Swift, về "Lập trình hướng Protocol - Protocol-Oriented Programming".</p><p>Nếu bạn chưa biết <strong>Dave Abrahams</strong> là ai hay không biết "Protocol-Oriented Programming" là gì, mình recommend các bạn xem lại video <a href="https://developer.apple.com/videos/play/wwdc2015/408/">Protocol-Oriented Programming in Swift</a> từ WWDC 2015</p><p>Quay lại Podcast của giữ John và Dave, họ thảo luận khá nhiều về tại sao Swift lại không đi theo hướng đối tượng, C++ có ảnh hưởng thế nào đến Swift, Generic Programming là gì và đặc biệt là tại sao Dave không còn làm việc ở Apple nữa.</p><p>Các bạn có thể nghe podcast <a href="https://www.swiftbysundell.com/podcast/71/">tại đây</a></p><h1>Thư viện - Mã nguồn</h1><h2>The Composable Architecture:</h2><p>Nếu các bạn muốn phát triên ứng dụng scalable và maintainable, chắc chắc các bạn sẽ nghĩ đến việc chia nhỏ ứng dụng của mình thành các thành phần bé hơn. Các anh bạn ở Pointfree.co mới phát hành một cấu trúc có tên là <a href="https://github.com/pointfreeco/swift-composable-architecture">The Compossable Architecture</a> (TCA) một vài tuần trước giúp các bạn có thể xây dựng ứng dung (SwiftUI và UIKit) theo cách lắp ghép các thành phần nhỏ lại với nhau.</p><p>Trên <a href="https://www.pointfree.co/">Pointfree.co</a> các bạn có thể theo dõi 3 videos gần nhất để xem họ giới thiệu về TCA nhé.</p><p>Đặc biệt nếu bạn muốn học thêm về Functional Programming và xem các video (mất tiền) bổ ích khác trên Pointfree.co, đặc biệt là các bạn ở Việt Nam, các bạn có thể xem mình có được <a href="https://www.pointfree.co/subscribe/personal?useRegionalDiscount=true">áp dụng giảm giá</a> không nhé. Điều kiện là bạn trả tiền bằng thẻ tín dụng issued ở Việt Nam.</p><h2>ACHNBrowserUI</h2><p>Mình không chơi Animal Crossing nhưng thấy rất nhiều người đang điên cuồng vì trò chơi này. Nếu bạn đang chơi trò này và muốn học SwiftUI, Combine thì bạn có thể tham khảo cái App <a href="https://github.com/Dimillian/ACHNBrowserUI">ACHNBrowserUI</a> này nhé. Mã mở hoàn toàn. App được viết bởi anh chàng <a href="https://github.com/Dimillian">Thomas Ricouard</a>, người đã gây bão trong cộng đồng Swift vì là một trong những người viết <a href="https://github.com/Dimillian/MovieSwiftUI">ứng dụng bằng SwiftUI đầu tiên</a>.</p><h1>Tools:</h1><h2>Concurrent Carthage</h2><p>Chắc mọi người đã biết và dùng <code>Carthage</code> để quản lý thử viện bên thứ ba cho ứng dụng của mình. Nếu bạn để ý thì <code>Carthage</code> khá là chậm nếu bạn có nhiều dependency. <a href="https://github.com/unchartedworks/ConcurrentCarthage">Concurrent Carthage</a> là một công cụ mới dùng để giúp <code>Carthage</code> sử dụng tối đang các core trên máy tính để tăng tốc.</p><h1>Apple</h1><h2>Apple Glass</h2><p>Anh chàng John Prosser, một leaker về các sản phẩm của Apple khá nổi tiếng, vừa phát hành một video lean về Apple Glass trên <a href="https://www.youtube.com/watch?v=SfjSy6T4iE4">Youtube</a> Apple đầu tư khá nhiều vào AR mấy năm gần đây. Mình sống ở Munich , Đức và là nơi Apple đã <a href="https://techcrunch.com/2015/05/28/apple-metaio/">mua một công ty AR</a>, khởi nguồn cho ARKit và các công nghệ AR của Apple. Mình có dùng một số AR apps trên điện thoại, thực ra cũng không thấy hay lắm. Cái Apple Glass chắc chắn thích hợp cho việc sử dụng app AR hơn là điện thoại.</p><p>Tiện nói về AR, mình có xem <a href="https://arcopypaste.app/">cái demo này</a> rất cool 😉.</p><h1>Vui</h1><p>Các bạn có biết chữ <code>NS</code> (ví dụ trong <code>NSObject</code>) viết tắt cho cái gì không?</p><p>Đáp án <a href="https://twitter.com/manicakes/status/1259851414622425092">ở đây</a> nhé 😉</p><h1>Lời cuối</h1><p>Puh, viết một bài tổng hợp cũng không phải đơn giản. Bây giờ là hơn 1h đêm rồi mà mình vẫn không biết bài viết có đủ thông tin hay ho cho mọi người không. Nhưng giờ thì mệt quá rồi nên mình xin ngừng <s>bút</s> phím ở đây. Hy vọng "Bản Tin Swift" số #1 mang lại cho các bạn một số thông tin hữu ích về cộng đồng Swift thế giới.</p><p>Mình rất muốn tìm và chia sẻ các thông tin về iOS/Apple/Swift với các bạn lập trình viên Việt Nam. Nếu bạn có ý kiến, ý tưởng, chỉ trích hay đóng góp gì cho bài viết, các bạn có thể liên lạc với mình trên <a href="https://twitter.com/antranapp">Twitter</a> hoặc <a href="https://github.com/antranapp">Github</a>. Rất mong nhận được ý kiến đóng góp của các bạn.</p><p>Các bạn cũng nhớ theo dõi trang <a href="https://www.facebook.com/Swift-Vi%E1%BB%87t-Nam-396835394265318">Facebook Swift Việt Nam</a> để được cập nhật các thông tin mới nhất về <s>Taylor</s> Swift nhé 😋.</p><p>Chào thân ái.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://swiftvietnam.com/posts/2020-04-19_use_publish_to_create_static_websites</guid><title>Publishing a blog using Swift for Linux (Ubuntu 18.04)</title><description>Publishing a blog using Swift for Linux (Ubuntu 18.04).</description><link>https://swiftvietnam.com/posts/2020-04-19_use_publish_to_create_static_websites</link><pubDate>Sun, 19 Apr 2020 21:28:00 +0200</pubDate><content:encoded><![CDATA[<h1>Publishing a blog using Swift for Linux (Ubuntu 18.04)</h1><p><a href="https://github.com/JohnSundell/Publish">Publish</a> is a static site generator built with Swift, created by the famous <a href="swiftbysundell.com">John Sundell</a> to run his blog.</p><p>This tutorial is going to show you how to install Publish on a Linux machine running Ubuntu 18.04 LTS and how to publish the generated site to Github Pages and connect it with a custom domain.</p><p>As you might guess, this blog post is generated by <strong>Publish</strong>, and hosted on Github Pages under the domain <a href="https://swiftvietnam.com">https://swiftvietnam.com</a>. <strong>The project is open-sourced on Github:</strong> <a href="https://github.com/antranapp/swiftvietnam">https://github.com/antranapp/swiftvietnam</a></p><h2>1. Install Swift 5.2.2 on Ubuntu 18.04 LTS</h2><p>The following steps show how to install the currently latest version of Swift 5.2.2 on Ubuntu 18.04 LTS. Since Swift supports other Linux distributions too, you should be able to install Swift on most of the Linux systems.</p><h3>Step 1: Install dependencies</h3><p><code>clang</code> and <code>libicu-dev</code> are required as dependencies for running Swift on Linux machines</p><ul><li><code>clang</code> provides tooling infrastructure for programming languages in the C programming languages. It acts as a compiler.</li><li><code>libicu-dev</code> provides full-featured Unicode and locale support. This allows for Unicode to be used in our code.</li></ul><p>We can install those dependencies by running the following code:</p><pre><code><div class="highlight"><span></span>sudo apt install clang libicu-dev
</div></code></pre><h3>Step 2: Download the Swift binary</h3><p>Apple releases many pre-compiled binary builds for Swift on the official <a href="https://swift.org/download">Swift website</a>.</p><p>We are going to download the build for Ubuntu 18.04 LTS using the following commands and unpack it into <code>swift</code> folder:</p><pre><code><div class="highlight"><span></span>mkdir ~/swift
<span class="nb">cd</span> ~/swift
wget https://swift.org/builds/swift-5.2.2-release/ubuntu1804/swift-5.2.2-RELEASE/swift-5.2.2-RELEASE-ubuntu18.04.tar.gz
tar -xvzf swift-5.2.2-RELEASE*
</div></code></pre><h3>Step 3: Add swift binary to PATH</h3><p>To execute <code>swift</code> command from anywhere, we need to add the path to the <code>swift</code> binary into our PATH environment variable.</p><p>We can find the path to the swift binary using <code>pwd</code> command:</p><pre><code><div class="highlight"><span></span><span class="nb">cd</span> ~/swift/swift-5.2.2-RELEASE-ubuntu18.04/usr/bin
<span class="nb">pwd</span>
</div></code></pre><p>Copy the output of the above command and add it into our <code>PATH</code>, ideally in <code>.bashrc</code> file to keep the change permanently.</p><pre><code><div class="highlight"><span></span><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$HOME</span>/bin/swift-5.2.2-RELEASE-ubuntu18.04/usr/bin
</div></code></pre><p>Remember to restart the session or run <code>source ~/.bashrc</code> before continue.</p><h3>Step 4: Testing</h3><p>Now you test if you can call <code>swift</code> command.</p><pre><code><div class="highlight"><span></span>swift -v
</div></code></pre><p>The output should be something like:</p><pre><code><div class="highlight"><span></span>Swift version <span class="m">5</span>.2.2 <span class="o">(</span>swift-5.2.2-RELEASE<span class="o">)</span>
Target: x86_64-unknown-linux-gnu
</div></code></pre><h2>2. Install Visual Studio Code plugin (optional)</h2><p>Since Xcode is not available for Linux system, and we are going to build our website using Swift, it would be good if we have some kind of IDE to aid the process.</p><p>Currently, we have 3 options for swift IDEs:</p><ul><li><strong>Option 1</strong>: Using any text editors or IDEs to edit the source code and run <code>swift build</code> or <code>publish generate</code> from command line to build our project. Probably, we will not have any code highlighting, source code references, auto-completion and IDE integrations.</li><li><strong>Option 2</strong>: <a href="https://www.jetbrains.com/clion/">CLion</a> from JetBrains: It is actually a C/C++ IDE but it has a plugin to support Swift source code. All JetBrains IDEs are excellent for sure, but it is not free.</li><li><strong>Option 3</strong>: Using Visual Studio Code together with SourceKit-LSP to have a good enough IDE to start writing and debugging Swift code.</li></ul><p>I'm going to show you how to do the <strong>option 3</strong>: integration of SourceKit-LSP in Visual Studio Code.</p><h3>Step 1: Build SourceKit-LSP</h3><p>Apple announced the SourceKit-LSP in August 2018 and released the open-source project in November 2018. As written in <a href="https://github.com/apple/sourcekit-lsp">its official repository</a>:</p><blockquote><p>SourceKit-LSP is an implementation of the <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a> (LSP) for Swift and C-based languages. It provides features like code-completion and jump-to-definition to editors that support LSP. SourceKit-LSP is built on top of <code>sourcekitd</code> and <code>clangd</code> for high-fidelity language support, and provides a powerful source code index as well as cross-language support. SourceKit-LSP supports projects that use the Swift Package Manager.</p></blockquote><p>We are going to build <code>SourceKit-LSP</code> from its source, and copy the built binary to <code>/usr/local/bin</code></p><pre><code><div class="highlight"><span></span>git clone https://github.com/apple/sourcekit-lsp.git
<span class="nb">cd</span> sourcekit-lsp
sudo apt install libsqlite3-dev libncurses5-dev
swift build -Xcxx -I<span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/bin/swift-5.2.2-RELEASE-ubuntu18.04/usr/lib/swift -Xcxx -I<span class="si">${</span><span class="nv">HOME</span><span class="si">}</span>/bin/swift-5.2.2-RELEASE-ubuntu18.04/usr/lib/swift/Block
sudo mv .build/x86_64-unknown-linux-gnu/debug/sourcekit-lsp /usr/local/bin
</div></code></pre><p><strong><em>Note:</em></strong></p><ul><li>You need to use the correct path to your <code>swift</code> binary in the command. I used mine here for easy understanding.</li><li>You might need to install additional dependencies depending on what packages are available on your machines.</li></ul><h3>Step 2: Build VSCode extension</h3><p>If you don't have Visual Studio Code installed yet, please follow <a href="https://code.visualstudio.com/docs/setup/linux">this instruction</a> to install it. The most simple way is to use <code>snap</code></p><pre><code><div class="highlight"><span></span>sudo snap install --classic code
</div></code></pre><p>We also need <code>node</code> and <code>npm</code> to build our custom Visual Studio Code extension. The installation instruction for Ubuntu can be found <a href="https://github.com/nodesource/distributions/blob/master/README.md#debinstall">here</a></p><pre><code><div class="highlight"><span></span>curl -sL https://deb.nodesource.com/setup_12.x <span class="p">|</span> sudo -E bash -
sudo apt-get install -y nodejs
</div></code></pre><p>Now, inside the <code>sourcekit-lsp</code> folder, run the following commands to create and install the extension for Visual Studio Code.</p><pre><code><div class="highlight"><span></span><span class="nb">cd</span> Editors/vscode
npm run createDevPackage 
code --install-extension out/sourcekit-lsp-vscode-dev.vsix
</div></code></pre><h2>3. Install <code>Publish</code></h2><p>We will now install <code>Publish</code> from its <a href="https://github.com/JohnSundell/Publish">source code</a>:</p><pre><code><div class="highlight"><span></span>git clone https://github.com/JohnSundell/Publish.git
<span class="nb">cd</span> Publish
make
</div></code></pre><p>If you get permission errors like this:</p><pre><code><div class="highlight"><span></span>install .build/release/publish-cli /usr/local/bin/publish
install: cannot create regular file <span class="s1">&#39;/usr/local/bin/publish&#39;</span>: Permission denied
Makefile:2: recipe <span class="k">for</span> target <span class="s1">&#39;install&#39;</span> failed
</div></code></pre><p>You should run <code>install</code> command with <code>sudo</code> instead:</p><pre><code><div class="highlight"><span></span>sudo install .build/release/publish-cli /usr/local/bin/publish
</div></code></pre><p>Now if you run <code>publish</code> from the command line. You will see something like this:</p><img src="../../Images/1/publish_installed_successfully.png" alt="preview"/><h2>4. Create a new website</h2><h3>Step 1: Create a new project</h3><p>Now we can use <code>publish</code> command to create a new website:</p><pre><code><div class="highlight"><span></span>mkdir SwiftVietnam
publish new
</div></code></pre><p>Open the newly created folder in Visual Studio Code:</p><pre><code><div class="highlight"><span></span><span class="nb">cd</span> SwiftVietnam
code .
</div></code></pre><p>To connect to the Swift Toolchain and SourceKit-LSP with Visual Studio Code, we need to create some setting files under <code>.vscode</code> in our workspace:</p><ul><li><strong>settings.json</strong>: set the path to the swift tool chain</li></ul><pre><code><div class="highlight"><span></span><span class="p">{</span>
  <span class="nt">&quot;sourcekit-lsp.toolchainPath&quot;</span><span class="p">:</span> <span class="s2">&quot;$HOME/bin/swift-5.2.2-RELEASE-ubuntu18.04/usr/bin&quot;</span>
<span class="p">}</span>
</div></code></pre><p>With this, we will be able to see class references for our Swift code:</p><img src="../../Images/1/publish_vscode.png" alt="preview"/><ul><li><strong>tasks.json</strong>: set the configuration so that we can run the project directly from VSCode by pressing <code>F5</code></li></ul><pre><code><div class="highlight"><span></span><span class="p">{</span>
  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;2.0.0&quot;</span><span class="p">,</span>
  <span class="nt">&quot;tasks&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;swift-build&quot;</span><span class="p">,</span> 
      <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> 
      <span class="nt">&quot;command&quot;</span><span class="p">:</span> <span class="s2">&quot;swift build&quot;</span> 
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</div></code></pre><p>We can also configure the debugger for our Swift project by installing <code>CodeLLDB</code> extension and creating <code>launch.json</code> in <code>.vscode</code> folder:</p><ul><li><strong>launch.json</strong>:</li></ul><pre><code><div class="highlight"><span></span><span class="p">{</span>
  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.2.0&quot;</span><span class="p">,</span>
  <span class="nt">&quot;configurations&quot;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;lldb&quot;</span><span class="p">,</span> 
      <span class="nt">&quot;request&quot;</span><span class="p">:</span> <span class="s2">&quot;launch&quot;</span><span class="p">,</span>
      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Debug&quot;</span><span class="p">,</span>
      <span class="nt">&quot;program&quot;</span><span class="p">:</span> <span class="s2">&quot;${workspaceFolder}/.build/debug/SwiftVietnam&quot;</span><span class="p">,</span> 
      <span class="nt">&quot;args&quot;</span><span class="p">:</span> <span class="p">[],</span>
      <span class="nt">&quot;cwd&quot;</span><span class="p">:</span> <span class="s2">&quot;${workspaceFolder}&quot;</span><span class="p">,</span>
      <span class="nt">&quot;preLaunchTask&quot;</span><span class="p">:</span> <span class="s2">&quot;swift-build&quot;</span> 
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</div></code></pre><p>Now we can use running and debugging capabilities of VSCode for our project: <img src="../../Images/1/publish_debug.png" alt="debugging"/></p><h2>5. Test and publish to Github Pages</h2><h3>Step 1: Testing locally</h3><p>To test the site locally, we can run:</p><pre><code><div class="highlight"><span></span>publish run
</div></code></pre><p>The generated website will be created in the <code>Output</code> folder. And a local server will be started at <code>http://localhost:8000</code>. We can now just open that address in our browser to review the site.</p><img src="../../Images/1/publish_new.png" alt="preview"/><h3>Step 2: Setting up a custom domain</h3><p>If you want to use a custom domain with your Github Pages, please follow the <a href="https://help.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site">official instruction</a> from Github to customize the domain name.</p><h3>Step 3: Push <code>Output</code> folder to remote</h3><p><code>Publish</code> has an extensible <code>DeploymentMethod</code> API which can be used to implement different deployment methods. Unfortunately, deployment to Github Pages is not a built-in feature. At the time of writing, there is a pull request which implements GithubPages Deploymentmethod, but it is still being developed.</p><p>Since publishing to GitHub pages is quite easy, we can alternatively write some shell scripts to push code from the <code>Output</code> folder to the <code>gh-pages</code> branch of our repository and configure the repository to serve our static website from the <code>gh-pages</code> branch.</p><p>The <code>deploy.sh</code> script looks like following:</p><pre><code><div class="highlight"><span></span><span class="ch">#!/bin/sh</span>

<span class="c1">## Rebuild the website</span>
publish generate

<span class="c1">## Add custom domain CNAME</span>
<span class="nb">echo</span> <span class="s2">&quot;swiftvietnam.com&quot;</span> &gt; Output/CNAME

<span class="c1">## Add files to git</span>
git add .
git commit -m <span class="s2">&quot;Update production&quot;</span>
git push origin master

<span class="c1">## Deploy to gh-pages</span>
<span class="nb">echo</span> <span class="s2">&quot;--&gt; Deploy to live server --&gt;&quot;</span>
git subtree push --prefix Output origin gh-pages
</div></code></pre><h2>6. Conclusion:</h2><p>In this tutorial, we have created a foundation for our static-generated website by finishing many configuration tasks:</p><ul><li>Created a complete swift development environment on Ubuntu 18.04 LTS with Visual Studio Code and SourceKit-LSP</li><li>Installed <code>Publish</code> tool to create and publish our website</li><li>Tested and published the first version of our website to Github Pages, running on a custom domain.</li></ul><p>In future posts, we will investigate how to use <a href="https://github.com/JohnSundell/Plot">Plot</a> to change the UI, to use <a href="https://github.com/JohnSundell/Splash">Splash</a> for syntax highlighting for Swift and to create different sections for our website.</p><p>Further in-depth resources and explanations can be found in the following links:</p><ul><li><a href="https://github.com/antranapp/swiftvietnam">SwiftVietnam's Github repository</a></li><li><a href="https://www.swiftbysundell.com/videos/static-site-generation-in-swift/">(Video) Static site generation in Swift</a></li><li><a href="https://github.com/JohnSundell/Publish">Publish's Github repository</a></li><li><a href="https://swift.org/download/#using-downloads">Swift installation instruction</a></li><li><a href="https://github.com/apple/sourcekit-lsp">SourceKit-LSP</a></li><li><a href="https://swiftvietnam.com//www.raywenderlich.com/8325890-a-complete-guide-to-swift-development-on-linux">A Complete Guide to Swift Development on Linux</a></li></ul>]]></content:encoded></item></channel></rss>