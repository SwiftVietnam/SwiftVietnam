<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Swift Vietnam Community</title><description>A community for Vietnamese Swift enthusiasts.</description><link>https://swiftvietnam.com</link><language>en</language><lastBuildDate>Mon, 20 Apr 2020 13:54:01 +0200</lastBuildDate><pubDate>Mon, 20 Apr 2020 13:54:01 +0200</pubDate><ttl>250</ttl><atom:link href="https://swiftvietnam.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://swiftvietnam.com/posts/2020-19-04_use_publish_to_create_static_websites</guid><title>Publishing a blog using Swift for Linux (Ubuntu 18.04)</title><description>Publishing a blog using Swift for Linux (Ubuntu 18.04).</description><link>https://swiftvietnam.com/posts/2020-19-04_use_publish_to_create_static_websites</link><pubDate>Sun, 19 Apr 2020 21:28:00 +0200</pubDate><content:encoded><![CDATA[<h1>Publishing a blog using Swift for Linux (Ubuntu 18.04)</h1><p><a href="https://github.com/JohnSundell/Publish">Publish</a> is a static site generator built with Swift, created by the famous <a href="swiftbysundell.com">John Sundell</a> to run his own blog.</p><p>This tutorial is going to show you how to install Publish on a Linux machine running Ubuntu 18.04 LTS and how to publish the genrated site to Github Pages and connect it with a custom domain.</p><p>As you might guess, this blog post is generated by Publish, and hosted on Github Pages under the domain <a href="https://swiftvietnam.com">https://swiftvietnam.com</a>.</p><h2>1. Install Swift 5.2.2 on Ubuntu 18.04 LTS</h2><p>The following steps show how to install the currently latest version of Swift 5.2.2 on Ubuntu 18.04 LTS. Since Swift supports other Linux distributions too, you should be able to install Swift on most of the Linux systems.</p><h3>Step 1: Install dependencies</h3><p><code>clang</code> and <code>libicu-dev</code> are required as dependencies for running Swift on Linux machines</p><ul><li><code>clang</code> provides tooling infrastructure for programming languages in the C programming languages. It acts as a compiler.</li><li><code>libicu-dev</code> provides full-featured Unicode and locale support. This allows for Unicode to be used in our code.</li></ul><p>We can install those dependencies by running the following code:</p><pre><code>sudo apt install clang libicu-dev
</code></pre><h3>Step 2: Download the released binary from <a href="https://swift.org/download">Swift website</a></h3><p>Apple releases many pre-compiled binary builds for Swift on the official Swift website.</p><p>We are going to download the build for Ubuntu 18.04 LTS using the following commands and unpack it into <code>swift</code> folder:</p><pre><code>mkdir ~/swift
cd ~/swift
wget https://swift.<span class="s-property">org</span>/builds/swift-<span class="s-number">5.2.2</span>-release/ubuntu1804/swift-<span class="s-number">5.2.2</span>-<span class="s-type">RELEASE</span>/swift-<span class="s-number">5.2.2</span>-<span class="s-type">RELEASE</span>-ubuntu18.<span class="s-number">04</span>.<span class="s-property">tar</span>.<span class="s-property">gz</span>
tar -xvzf swift-<span class="s-number">5.2.2</span>-<span class="s-type">RELEASE</span>*
</code></pre><h3>Step 3: Add swift binary to PATH</h3><p>In order to execute <code>swift</code> command from anywhere, we need to add the path to the <code>swift</code> binary into our PATH environment variable.</p><p>We can find the path to the swift binary using <code>pwd</code> command:</p><pre><code>cd ~/swift/swift-<span class="s-number">5.2.2</span>-<span class="s-type">RELEASE</span>-ubuntu18.<span class="s-number">04</span>/usr/bin
pwd
</code></pre><p>Copy the output of the above command and add it into our <code>PATH</code>, ideally in <code>.bashrc</code> file to keep the change permenantly.</p><pre><code>export <span class="s-type">PATH</span>=$PATH:$HOME/bin/swift-<span class="s-number">5.2.2</span>-<span class="s-type">RELEASE</span>-ubuntu18.<span class="s-number">04</span>/usr/bin
</code></pre><p>Remember to restart the session or run <code>source ~/.bashrc</code> before continue.</p><h3>Step 4: Testing</h3><p>Now you test if you can call <code>swift</code> command.</p><pre><code>swift -v
</code></pre><p>The output should be something like:</p><pre><code><span class="s-type">Swift</span> version <span class="s-number">5.2.2</span> (swift-<span class="s-number">5.2.2</span>-<span class="s-type">RELEASE</span>)
<span class="s-type">Target</span>: x86_64-unknown-linux-gnu
</code></pre><h2>2. Install Visual Studio Code plugin (optional)</h2><p>Since Xcode is not avaialbe for Linux system, and we are going to build our website using Swift, it would be good if we have some kind of IDE to aid the process.</p><p>Currently, we have 3 options for swift IDEs:</p><ul><li><strong>Option 1</strong>: Using any text editors or IDEs to edit the source code and run <code>swift build</code> from command line to build our project. Probably, we will not have any code highliting, source code references, auto completion and IDE integrations.</li><li><strong>Option 2</strong>: <a href="https://www.jetbrains.com/clion/">CLion</a> from JetBrains: It is actually a C/C++ IDE but it has a plugin to support Swift source code. All JetBrains IDEs are execellent for sure, but it is not free.</li><li><strong>Option 3</strong>: Using Visual Studio Code together with SourceKit-LSP to have a good enough IDE to start writting and debugging Swift code.</li></ul><p>I'm going to show you how to do the <strong>option 3</strong>: integration of SourceKit-LSP in Visual Studio Code.</p><h3>Step 1: Build SourceKit-LSP</h3><p>Apple announced the SourceKit-LSP in August 2018 and released the open source project in November 2018. As written in <a href="https://github.com/apple/sourcekit-lsp">its official repository</a>:</p><blockquote><p>SourceKit-LSP is an implementation of the <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a> (LSP) for Swift and C-based languages. It provides features like code-completion and jump-to-definition to editors that support LSP. SourceKit-LSP is built on top of sourcekitd and clangd for high-fidelity language support, and provides a powerful source code index as well as cross-language support. SourceKit-LSP supports projects that use the Swift Package Manager.</p></blockquote><p>We are going to build <code>SourceKit-LSP</code> from its source, and copy the built binary to <code>/usr/local/bin</code></p><pre><code>

git clone https://github.<span class="s-property">com</span>/apple/sourcekit-lsp.<span class="s-property">git</span>

cd sourcekit-lsp

sudo apt install libsqlite3-dev libncurses5-dev

swift build -<span class="s-type">Xcxx</span> -<span class="s-type">I$</span>{<span class="s-type">HOME</span>}/bin/swift-<span class="s-number">5.2.2</span>-<span class="s-type">RELEASE</span>-ubuntu18.<span class="s-number">04</span>/usr/lib/swift -<span class="s-type">Xcxx</span> -<span class="s-type">I$</span>{<span class="s-type">HOME</span>}/bin/swift-<span class="s-number">5.2.2</span>-<span class="s-type">RELEASE</span>-ubuntu18.<span class="s-number">04</span>/usr/lib/swift/<span class="s-type">Block</span>

sudo mv .<span class="s-dotAccess">build</span>/x86_64-unknown-linux-gnu/debug/sourcekit-lsp /usr/local/bin
</code></pre><p><strong><em>Note:</em></strong> - You need to use the correct path to your <code>swift</code> binary in the command. I used mine here for easy understanding. - You might need to install additional dependencies depending on what packages are available on your machines.</p><h3>Step 2: Build VSCode extension</h3><p>If you don't have Visual Studio Code installed yet, please follow <a href="https://code.visualstudio.com/docs/setup/linux">this instruction</a> to install it. The most simple way is to use <code>snap</code></p><pre><code>sudo snap install --classic code
</code></pre><p>We also need <code>node</code> and <code>npm</code> to build our custom Visual Studio Code extension. The installation instruction for Ubuntu can be found <a href="https://github.com/nodesource/distributions/blob/master/README.md#debinstall">here</a></p><pre><code>curl -sL https://deb.<span class="s-property">nodesource</span>.<span class="s-property">com</span>/setup_12.<span class="s-property">x</span> | sudo -<span class="s-type">E</span> bash -
sudo apt-<span class="s-keyword">get</span> install -y nodejs
</code></pre><p>Now, inside the <code>sourcekit-lsp</code> folder, run the following commands to create and install the extesion for Visual Studio Code.</p><pre><code>cd <span class="s-type">Editors</span>/vscode
npm run createDevPackage 
code --install-<span class="s-keyword">extension</span> out/sourcekit-lsp-vscode-dev.<span class="s-property">vsix</span>
</code></pre><h2>3. Install <code>Publish</code></h2><p>We will now install <code>Publish</code> from its <a href="https://github.com/JohnSundell/Publish">source code</a>:</p><pre><code>git clone https://github.<span class="s-property">com</span>/<span class="s-type">JohnSundell</span>/<span class="s-type">Publish</span>.<span class="s-property">git</span>
cd <span class="s-type">Publish</span>
make
</code></pre><p>If you get permission errors like this:</p><pre><code>install .<span class="s-dotAccess">build</span>/release/publish-cli /usr/local/bin/publish
install: cannot create regular file '/usr/local/bin/publish': <span class="s-type">Permission</span> denied
<span class="s-type">Makefile</span>:<span class="s-number">2</span>: recipe <span class="s-keyword">for</span> target 'install' failed
</code></pre><p>You should run <code>install</code> command with <code>sudo</code> instead:</p><pre><code>sudo install .<span class="s-dotAccess">build</span>/release/publish-cli /usr/local/bin/publish
</code></pre><p>Now if you run <code>publish</code> from the command line. You will see something like this:</p><pre><code><span class="s-type">Publish Command Line Interface</span>
------------------------------
<span class="s-type">Interact</span> with the <span class="s-type">Publish</span> <span class="s-keyword">static</span> site generator from
the command line, to create new websites, or to generate
and deploy existing ones.

<span class="s-type">Available</span> commands:

- new: <span class="s-type">Set</span> up a new website <span class="s-keyword">in</span> the current folder.
- generate: <span class="s-type">Generate</span> the website <span class="s-keyword">in</span> the current folder.
- run: <span class="s-type">Generate</span> and run a localhost server on <span class="s-keyword">default</span> port <span class="s-number">8000</span>
       <span class="s-keyword">for</span> the website <span class="s-keyword">in</span> the current folder. <span class="s-type">Use</span> the <span class="s-string">"-p"</span>
       or <span class="s-string">"--port"</span> option <span class="s-keyword">for</span> customizing the <span class="s-keyword">default</span> port.
- deploy: <span class="s-type">Generate</span> and deploy the website <span class="s-keyword">in</span> the current
       folder, according to its deployment method.
</code></pre><h2>4. Create a new website</h2><p>Now we can use <code>publish</code> command to create a new website:</p><pre><code>mkdir <span class="s-type">SwiftVietnam</span>
publish new
</code></pre><p>Open the newly created folder in Visual Studio Code:</p><pre><code>code .
</code></pre><p>To connect to the Swift Toolchain and SourceKit-LSP with Visual Studio Code, we need to create some some setting files under <code>.vscode</code> in our workspace.</p><p><strong>settings.json</strong>: set the path to the swift tool chain</p><pre><code>{
  <span class="s-string">"sourcekit-lsp.toolchainPath"</span>: <span class="s-string">"$HOME/bin/swift-5.2.2-RELEASE-ubuntu18.04/usr/bin"</span>
}
</code></pre><p><strong>tasks.json</strong>: set the configuration so that we can run the project directly from VSCode by pressing <code>F5</code></p><pre><code>{
  <span class="s-string">"version"</span>: <span class="s-string">"2.0.0"</span>,
  <span class="s-string">"tasks"</span>: [
    {
      <span class="s-string">"label"</span>: <span class="s-string">"swift-build"</span>, <span class="s-comment">// 1</span>
      <span class="s-string">"type"</span>: <span class="s-string">"shell"</span>, <span class="s-comment">// 2</span>
      <span class="s-string">"command"</span>: <span class="s-string">"swift build"</span> <span class="s-comment">// 3</span>
    }
  ]
}
</code></pre><p>We can also configure the debugger for our Swift project by installing <code>CodeLLDB</code> extension and creating <code>launch.json</code> in <code>.vscode</code> folder:</p><p><strong>launch.json</strong>:</p><pre><code>{
  <span class="s-string">version": "0</span>.<span class="s-number">2</span>.<span class="s-string">0",
  configurations": [</span>
    {
      <span class="s-string">"type"</span>: <span class="s-string">"lldb"</span>, <span class="s-comment">// 1</span>
      <span class="s-string">"request"</span>: <span class="s-string">"launch"</span>,
      <span class="s-string">"name"</span>: <span class="s-string">"Debug"</span>,
      <span class="s-string">"program"</span>: <span class="s-string">"${workspaceFolder}/.build/debug/SwiftVietnam"</span>, <span class="s-comment">// 2</span>
      <span class="s-string">"args"</span>: [],
      <span class="s-string">"cwd"</span>: <span class="s-string">"${workspaceFolder}"</span>,
      <span class="s-string">"preLaunchTask"</span>: <span class="s-string">"swift-build"</span> <span class="s-comment">// 3</span>
    }
  ]
}
</code></pre><h2>5. Test locally and publish to Github Pages using a custom domain</h2><h3>Step 1: Testing locally</h3><p>To test the site locally, we can run:</p><pre><code>publish run
</code></pre><p>The generated website will be created in the <code>Output</code> folder. And a local server will be started at <code>http://localhost:8000</code>. We can now just open that address in our browser to review the site.</p><h3>Step 2: Setting up custom domain</h3><p>If you want to use a custom domain with your Github Pages, please follow the <a href="https://help.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site">official instruction</a> from Github to customize the domain name.</p><h3>Step 3: Push <code>Output</code> folder to remote</h3><p><code>Publish</code> has an extensible <code>DeploymentMethod</code> API which can be used to implement different deployment methods. Unfortunately, deployment to Github Pages is not a built-in feature. At the time of writting, there is a pull request which implements GithubPages Deploymentmethod, but it is still being developed.</p><p>Since publishing to github pages is quite easy, we can alternatively write some shell scripts to push code from <code>Output</code> folder to the <code>gh-pages</code> branch of our repository and configure the repository to serve our static website from the <code>gh-pages</code> branch.</p><p>The <code>deploy.sh</code> script looks like following:</p><pre><code>#!/bin/sh

## <span class="s-type">Rebuild</span> the website
publish generate

## <span class="s-type">Add</span> custom domain <span class="s-type">CNAME</span>
echo <span class="s-string">"swiftvietnam.com"</span> &gt; <span class="s-type">Output</span>/<span class="s-type">CNAME</span>

## <span class="s-type">Add</span> files to git
git add .
git commit -m <span class="s-string">"Update production"</span>
git push origin master

## <span class="s-type">Deploy</span> to gh-pages
echo <span class="s-string">"--&gt; Deploy to live server --&gt;"</span>
git subtree push --prefix <span class="s-type">Output</span> origin gh-pages
</code></pre><h2>6. Conclusion:</h2><p>In this tutorial, we have created a foundation for our static-generated website by finishing many configuration tasks:</p><ul><li>Created a complte swift development environment on Ubuntu 18.04 LTS with Visual Studio Code and SourceKit-LSP</li><li>Installed <code>Publish</code> tool to create and publish our website</li><li>Tested and published a first version of our website to Github Pages, running on a custom domain.</li></ul><p>In future post, we will investigate how to use <a href="https://github.com/JohnSundell/Plot">Plot</a> to change the UI, to use <a href="https://github.com/JohnSundell/Splash">Splash</a> for syntax highlighting for Swift and to create different sections for our website.</p><p>Further in-dept resources and explanations can be found in the following links:</p><ul><li><a href="https://www.swiftbysundell.com/videos/static-site-generation-in-swift/">Static site generation in Swift</a></li><li><a href="https://github.com/JohnSundell/Publish">Publish github repository</a></li><li><a href="https://swift.org/download/#using-downloads">Swift installation instruction</a></li><li><a href="https://github.com/apple/sourcekit-lsp">SourceKit-LSP</a></li><li><a href="https://swiftvietnam.com//www.raywenderlich.com/8325890-a-complete-guide-to-swift-development-on-linux">A Complete Guide to Swift Development on Linux</a></li></ul>]]></content:encoded></item></channel></rss>